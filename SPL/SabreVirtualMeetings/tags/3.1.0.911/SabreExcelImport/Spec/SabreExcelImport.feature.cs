// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Spec
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SabreExcelImport")]
    public partial class SabreExcelImportFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SabreExcelImport.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SabreExcelImport", "As a user of the VNOC Symphony system \r\nI want to transform the Sabre VM out file" +
                    " into Symphony Conferences\r\nSo that I can import Sabre VM conferences into Symph" +
                    "ony", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parse SVM Meeting Report into an a set of Symphony Conferences")]
        public virtual void ParseSVMMeetingReportIntoAnASetOfSymphonyConferences()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse SVM Meeting Report into an a set of Symphony Conferences", ((string[])(null)));
#line 6
 this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have a SVM meeting report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("the file is loaded into the Svm Meeting Importer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("the meetings should be accessible from the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.And("the meetings should be Symphony Conferences", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform the SVM Meeting Schedule into a Symphony Conference Schedule")]
        [NUnit.Framework.TestCaseAttribute("\'06/20/2013 04:30:00.000 UTC\'", "\'06/20/2013 05:30:00.000 UTC\'", "\'06/20/2013 04:30:00.000\'", "\'06/20/2013 04:30:00.000\'", "\'06/20/2013 05:30:00.000\'", null)]
        public virtual void TransformTheSVMMeetingScheduleIntoASymphonyConferenceSchedule(string sVM_START_TIME, string sVM_END_TIME, string sETUP_TIME, string sTART_TIME, string eND_TIME, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform the SVM Meeting Schedule into a Symphony Conference Schedule", exampleTags);
#line 12
 this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("I have a SVM meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
 testRunner.When(string.Format("the SVM meeting start time is {0}", sVM_START_TIME), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
 testRunner.And(string.Format("the SVM meeting end time is {0}", sVM_END_TIME), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("the SVM meeting includes a SVM room with Id XYZ_Sabre_room", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("the file is loaded into the Svm Meeting Importer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("I have a way to sync the meeting to Symphony", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.Then("the meetings should be accessible from the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
 testRunner.And(string.Format("the Symphony conference should have a setup time of {0}", sETUP_TIME), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And(string.Format("the Symphony conference should have a start time of {0}", sTART_TIME), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.And(string.Format("the Symphony conference should have a end time of {0}", eND_TIME), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And("the Symphony conference should be represented as a UTC date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
 testRunner.And("the Symphony conference should use Europe/London as the timezone", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("the Symphony conference should include a space with third party id XYZ_Sabre_room" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform the SVM Meeting Title into a Symphony Conference Title")]
        [NUnit.Framework.TestCaseAttribute("\'QTP_MYMEETINGS_AUTO\'", "\'QTP_MYMEETINGS_AUTO\'", null)]
        public virtual void TransformTheSVMMeetingTitleIntoASymphonyConferenceTitle(string sVM_TITLE, string tITLE, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform the SVM Meeting Title into a Symphony Conference Title", exampleTags);
#line 31
 this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have a SVM meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.When(string.Format("the SVM meeting title is {0}", sVM_TITLE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.And("the file is loaded into the Svm Meeting Importer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("I have a way to sync the meeting to Symphony", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.Then("the meetings should be accessible from the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 37
 testRunner.And(string.Format("the Symphony conference should have a title of {0}", tITLE), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform the SVM Meeting Status into a Symphony Conference Status")]
        [NUnit.Framework.TestCaseAttribute("\'Active\'", "\'false\'", "\'Scheduled\'", null)]
        [NUnit.Framework.TestCaseAttribute("\'Active\'", "\'true\'", "\'Modified\'", null)]
        [NUnit.Framework.TestCaseAttribute("\'Cancelled\'", "\'true\'", "\'Cancelled\'", null)]
        [NUnit.Framework.TestCaseAttribute("\'Cancelled\'", "\'false\'", "\'Cancelled\'", null)]
        [NUnit.Framework.TestCaseAttribute("\'Requested\'", "\'true\'", "\'Modified\'", null)]
        [NUnit.Framework.TestCaseAttribute("\'Requested\'", "\'false\'", "\'Scheduled\'", null)]
        public virtual void TransformTheSVMMeetingStatusIntoASymphonyConferenceStatus(string sVM_STATUS, string eXISTS, string sTATUS, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform the SVM Meeting Status into a Symphony Conference Status", exampleTags);
#line 42
 this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have a SVM meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.When(string.Format("the SVM meeting status is {0}", sVM_STATUS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.And(string.Format("the SVM meeting id {0} within Symphony", eXISTS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("the file is loaded into the Svm Meeting Importer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("I have a way to sync the meeting to Symphony", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.Then("the meetings should be accessible from the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
 testRunner.And(string.Format("the Symphony conference should have a status of {0}", sTATUS), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Transform the SVM meeting into a Symphony Conference while maintaining existing c" +
            "onfirmation number")]
        [NUnit.Framework.TestCaseAttribute("0", null)]
        [NUnit.Framework.TestCaseAttribute("12345", null)]
        public virtual void TransformTheSVMMeetingIntoASymphonyConferenceWhileMaintainingExistingConfirmationNumber(string cONFIRMATIONNUMBER, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transform the SVM meeting into a Symphony Conference while maintaining existing c" +
                    "onfirmation number", exampleTags);
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("I have a SVM meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
 testRunner.When("the SVM meeting id is XYZLocator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.And("the svm conference has a sync point with a confimation number of <CONFIRMAION NUM" +
                    "BER>", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 63
 testRunner.And("the file is loaded into the Svm Meeting Importer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 64
 testRunner.And("I have a way to sync the meeting to Symphony", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.Then("the meetings should be accessible from the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
 testRunner.And("the Symphony conference confirmation number should remain unchanged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Load a list of SVM Meeting Ids from the SVM Meeting Report")]
        public virtual void LoadAListOfSVMMeetingIdsFromTheSVMMeetingReport()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Load a list of SVM Meeting Ids from the SVM Meeting Report", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("I have a SVM meeting report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 74
 testRunner.When("the file is loaded into the Svm Meeting Importer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("the cancelled meetings should be accessible from the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.And("the meetings should be Symphony Conferences", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
